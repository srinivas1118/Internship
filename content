h

app.py

from Tkinter import *

from PIL import Image, ImageTk

font_size = -24

# Declare global variables
root = None
dfont = None
frame = None
dtime = None

# Global variable to remember if we are fullscreen or windowed
fullscreen = False

###############################################################################
# Functions

# Toggle fullscreen
def toggle_fullscreen(event=None):

    global root
    global fullscreen

    # Toggle between fullscreen and windowed modes
    fullscreen = not fullscreen
    root.attributes('-fullscreen', fullscreen)
    #resize()



root = Tk()
root.title("Title")
root.geometry("600x600")
root.configure(background="black")





class FullScreenApp(object):
    def __init__(self, master, **kwargs):
        self.master=master
        pad=3
        self._geom='200x200+0+0'
        master.geometry("{0}x{1}+0+0".format(
            master.winfo_screenwidth()-pad, master.winfo_screenheight()-pad))
        #master.bind('<Escape>',self.toggle_geom)            
    def toggle_geom(self,event):
        geom=self.master.winfo_geometry()
        print(geom,self._geom)
        self.master.geometry(self._geom)
        self._geom=geom




class Fit_Image(Frame):
    def __init__(self, master, *pargs):
        Frame.__init__(self, master, *pargs)



        self.image = Image.open("/home/intern/mylogo.png")
        self.img_copy= self.image.copy()


        self.background_image = ImageTk.PhotoImage(self.image)

        self.background = Label(self, image=self.background_image)
        self.background.pack(fill=BOTH, expand=YES)
        self.background.bind('<Configure>', self._resize_image)

    def _resize_image(self,event):

        new_width = event.width
        new_height = event.height

        self.image = self.img_copy.resize((new_width, new_height))

        self.background_image = ImageTk.PhotoImage(self.image)
        self.background.configure(image =  self.background_image)

def end_fullscreen(event=None):
    root.destroy()


root.bind('<Escape>', end_fullscreen)

e = Fit_Image(root)
e.pack(fill=BOTH, expand=YES)

app=FullScreenApp(root)
toggle_fullscreen()
root.mainloop()

https://stackoverflow.com/questions/19911111/how-to-build-a-python-script-with-its-dependencies

https://github.com/hypriot/flash

https://stackoverflow.com/questions/6357361/alternative-to-execfile-in-python-3/6357418

https://github.com/python/docsbuild-scripts

https://github.com/python/cpython/blob/master/Lib/distutils/command/build.py

https://dzone.com/articles/top-20-git-commands-with-examples

		bosch-docupedia
https://inside-docupedia.bosch.com/confluence/pages/viewpage.action?pageId=764006152#Git/GerritSetup,CommonCommandsandCommonProblems-CreateandCheckouttoNewLocalUserBranch                                      

http://weng-blog.com/2015/05/Build-Linux-kernel-rootfs-from-scratch/

----------------------------------------------------------------------
http://variwiki.com/index.php?title=Yocto_Morty_Build_Yocto_release
https://community.nxp.com/thread/367343
---------------------------------------------------------------------
GUI- IMAGES
https://www.hongkiat.com/blog/pi-operating-systems/
https://buildroot.org/downloads/manual/manual.html
https://www.youtube.com/watch?v=fxWRZuKqmk4
https://www.youtube.com/watch?v=e1Fd5JaI-0Y
https://www.linuxquestions.org/questions/linux-general-1/how-to-start-gui-from-command-line-%40-bootup-513501/
https://github.com/thibmaek/awesome-raspberry-pi
https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/init.rst

	convert to img file
https://ubuntuhak.blogspot.com/2012/10/how-to-create-format-and-mount-img-files.html
https://www.wikihow.com/Create-an-ISO-File-in-Linux 
https://askubuntu.com/questions/215505/how-do-you-monitor-the-progress-of-dd
https://serverfault.com/questions/246835/convert-directory-to-qemu-kvm-virtual-disk-image 
http://www.simplyembedded.org/archives/filesystems-with-the-raspberry-pi/
https://raspberrypi.stackexchange.com/questions/70615/raspberrypi-auto-fix-root-filesystem-at-boot-time 
https://www.raspberrypi.org/documentation/installation/installing-images/linux.md
https://community.arm.com/developer/tools-software/oss-platforms/w/docs/385/build-a-buildroot-user-space

You can copy the content of a folder /source to another existing folder /dest with the command
                                     cp -a /source/. /dest/
The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.
The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.




myupdate.service

[Unit]
Description=Update

[Service]
Environment=DISPLAY=:0
Environment=XAUTHORITY=/home/intern/.Xauthority
ExecStart=/usr/bin/python /home/intern/app.py
Restart=always
RestartSec=60s
KillMode=process
TimeoutSec=infinity

[Install]
WantedBy=graphical.target

parser.py


from xml.dom.minidom import parse
import xml.dom.minidom


def open_xml(): 

	global DOMTree, start
	DOMTree = xml.dom.minidom.parse("config.xml")
	start = DOMTree.documentElement


def download_link():
	
	global kernels,uboots,gcc_link,linux, u_boot_link, boot_scr_link
	
	kernels = start.getElementsByTagName("kernel")
	for kernel in kernels:
		gcc_link = kernel.getElementsByTagName('gcc_d_link')[0].childNodes[0].data
		linux = kernel.getElementsByTagName('linux_d_link')[0].childNodes[0].data
		
	uboots=start.getElementsByTagName("uboot")
	for uboot in uboots:
		u_boot_link = uboot.getElementsByTagName('u_boot_d_link')[0].childNodes[0].data
		boot_scr_link = uboot.getElementsByTagName('boot_scr_d_link')[0].childNodes[0].data
		
		
def get_tar_files():
	
	global gcc_fname, gcc_dest , extract_uboot
	
	for kernel in kernels:
		extracts= kernel.getElementsByTagName("extract")
		for extract in extracts:
			gcc_fname = kernel.getElementsByTagName('f_name')[0].childNodes[0].data
			gcc_dest = kernel.getElementsByTagName('dest')[0].childNodes[0].data
			
	for uboot in uboots:
		extract_uboot = uboot.getElementsByTagName('extract_f_name')[0].childNodes[0].data
	
 
def get_version():
	
	global kernel_version
	
	for kernel in kernels:
		kernel_version = kernel.getElementsByTagName('kernel_version')[0].childNodes[0].data
		

def get_config():
	
	global gcc_path, board_config,u_boot_config
	
	for kernel in kernels:
		configs= kernel.getElementsByTagName("config")
		for config in configs:
			gcc_path = config.getElementsByTagName('gcc_path')[0].childNodes[0].data
			board_config = config.getElementsByTagName('board_config')[0].childNodes[0].data
	
	for uboot in uboots:
		configs= uboot.getElementsByTagName("config")
		for config in configs:
			u_boot_config = config.getElementsByTagName('uboot_conf')[0].childNodes[0].data 


def get_boot_files():

	global img_type,modules,dtbs,scr_name
	
	for kernel in kernels:
		images= kernel.getElementsByTagName("image")
		for image in images:
			img_type= image.getElementsByTagName('img_type')[0].childNodes[0].data
			modules= image.getElementsByTagName('modules')[0].childNodes[0].data
			dtbs= image.getElementsByTagName('dtb')[0].childNodes[0].data
			
	for uboot in uboots:		
		scr_name= uboot.getElementsByTagName('scr_name')[0].childNodes[0].data
	
def get_boot_files_path():
		
		global zimage_path,dtb_path,overlays_dtb_path,readme_path
		
		flashing=start.getElementsByTagName("flash")
		for flash in flashing:
			zimage_path= flash.getElementsByTagName('zimage_path')[0].childNodes[0].data
			dtb_path= flash.getElementsByTagName('dtb_path')[0].childNodes[0].data
			overlays_dtb_path= flash.getElementsByTagName('overlays_dtb_path')[0].childNodes[0].data
			readme_path= flash.getElementsByTagName('readme_path')[0].childNodes[0].data
		

def change_dir():
	
	global uboot_dir_name
	
	for uboot in uboots:
		uboot_dir_name= uboot.getElementsByTagName('ch_dir_name')[0].childNodes[0].data
	
def get_sd_name():

	global sd_name
	
	flashing=start.getElementsByTagName("flash")
	for flash in flashing:
		sd_name = flash.getElementsByTagName('sd_name')[0].childNodes[0].data
	
def get_partition_details():

	global fat_start_size,fat_end_size,ext_start_size,ext_end_size
	
	flashing=start.getElementsByTagName("flash")
	for flash in flashing:
	
		fat32= flash.getElementsByTagName("fat_32")
		for fat_32 in fat32:
			fat_start_size = fat_32.getElementsByTagName('start_size')[0].childNodes[0].data	
			fat_end_size = fat_32.getElementsByTagName('end_size')[0].childNodes[0].data
			
		ext4= flash.getElementsByTagName("ext4")
		for ext_4 in ext4:
			ext_start_size= ext_4.getElementsByTagName('start_size')[0].childNodes[0].data	
			ext_end_size= ext_4.getElementsByTagName('end_size')[0].childNodes[0].data
			
			
def get_firmware_files():
	
	global firmware_path
	
	firm = start.getElementsByTagName("firmware")
	for firmware in firm:
		firmware_path = firmware.getElementsByTagName('d_link')[0].childNodes[0].data
	
	


def get_rfs():

	global fs_name
	
	rfs = start.getElementsByTagName("rootfs")
	for rootfs in rfs:
		fs_name = rootfs.getElementsByTagName('f_name')[0].childNodes[0].data



def main():
	
	open_xml()
	download_link()
	get_tar_files()
	get_version()
	get_config()
	get_boot_files()
	get_boot_files_path()		
	change_dir()
	get_sd_name()	
	get_partition_details()
	get_rfs()
	get_firmware_files()
		
main()

print "imported variables\n"

				

